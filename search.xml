<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据结构之基础</title>
      <link href="/archives/46208.html"/>
      <url>/archives/46208.html</url>
      
        <content type="html"><![CDATA[<p>数据结构基础，了解数据结构的分类，认识一下抽象数据类。</p><span id="more"></span><h1 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h1><p><strong>内存中元素紧挨在一起的数据结构为顺序结构</strong>。在C语言中，声明一个整数结构类型长度为<code>5</code>的数组时，内存中会留出5个整数长度的连续空间用于存储数组。实际上，数组的指针可以说是指向在数组中的第一个元素。当要修改第4个元素时，计算机是找到了数组指针地址，跳跃3个整数长度的距离，从而找到第4个元素的位置。</p><h1 id="链式结构"><a href="#链式结构" class="headerlink" title="链式结构"></a>链式结构</h1><p><strong>内存中元素可连续也可不连续，通过指针寻找和连接元素的数据结构为链式结构</strong>。在Java语言中，链表（Linked List）和树（Tree）都属于链式结构。他们属于抽象的结构类型，类型所包含的元素被称为节点（Node）。链表节点中的值可以为整数类、浮点类、字符串等，包括抽象数据类；但链表节点中还会包含有节点的一个后继元素指针。树节点对比链表节点的不同在于树节点中可以包含有多个后继元素指针。总结起来就是<strong>链式结构节点在内存中连续摆放不是必须的</strong>，当计算机查找某个节点时，会走遍目标节点前的所有节点，从而顺着第一个节点的指针找到目标指针。</p><h1 id="比较顺序结构和链式结构"><a href="#比较顺序结构和链式结构" class="headerlink" title="比较顺序结构和链式结构"></a>比较顺序结构和链式结构</h1><p><img src="/gallery/data-structure-random-linked-ram.png" alt="顺序结构和链式结构在内存中的不同"></p><ul><li>顺序结构在内存中有固定最大长度，而链式结构在内存中没有，所以在流动数据多的情况下，链式结构对空间利用更灵活。</li><li>顺序结构在内存中是元素之间是连续的，而链式结构在内存中很可能是不连续的，所以在查找元素时，通过地址计算公式查找，顺序结构的效率更高。</li><li>在首部添加元素或删除中间某个元素的情况下，链式结构的效率会更高，因为对比顺序结构，链式结构不需要重新排列。</li><li>顺序结构最大长度难以确定的情况下，会产生太多的储存空间“碎片”，而链式结构原本就是“碎片化”的。</li></ul><h1 id="C语言数据类型"><a href="#C语言数据类型" class="headerlink" title="C语言数据类型"></a>C语言数据类型</h1><p>原子/基本类型：short, int, long, float, double, char<br>结构/构造类型：数组, struct, union, enum<br>其他：指针，空（void）</p><h1 id="抽象数据类型（Abstract-Data-Type）"><a href="#抽象数据类型（Abstract-Data-Type）" class="headerlink" title="抽象数据类型（Abstract Data Type）"></a>抽象数据类型（Abstract Data Type）</h1><p>区别于基本数据类型，基本数据类型有设定数据占用空间的极限、数据表示的方式和内存中结构的特性；抽象数据类型基于基本数据类型形成更复杂的数据类型，例如链表（Linked List）和树（Tree）都属于抽象数据类。颜色（Color）、坐标（Point）等结构类也都属于抽象数据类。</p><blockquote><p>所谓抽象数据类型就是把数据类型和相关操作捆绑在一起。</p></blockquote><p>Color抽象数据类:<br>由Red、Green和Blue，3个范围为0-255的整数值表示颜色范围，加上一个范围为0-1的浮点型Alpha数值表示透明度。</p><p>Point抽象数据类:<br>由x、y和z，3个整数值表示三维空间中的坐标。</p><h1 id="抽象数据类型伪代码"><a href="#抽象数据类型伪代码" class="headerlink" title="抽象数据类型伪代码"></a>抽象数据类型伪代码</h1><pre class="line-numbers language-none"><code class="language-none">ADT 抽象数据类型名Data  数据元素之间逻辑关系的定义Operation  操作endADT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>本文参考：<br><a href="https://www.bilibili.com/video/BV1jW411K7yg">【C语言描述】《数据结构和算法》（小甲鱼）</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 抽象数据类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构之线性表List</title>
      <link href="/archives/b163d39c.html"/>
      <url>/archives/b163d39c.html</url>
      
        <content type="html"><![CDATA[<p>线性表（List），了解线性表的基础知识，认识一下线性表的种类。</p><span id="more"></span><h1 id="线性表List"><a href="#线性表List" class="headerlink" title="线性表List"></a>线性表List</h1><p>线性表（List）：由另个或多个元素组成的有限序列。<strong>元素是有序的，可以被排列的</strong>。在有序结构中，某个元素<code>ai</code>前面的元素<code>ai-1</code>称为<strong>前驱元素</strong>，后面的元素<code>ai+1</code>称为<strong>后继元素</strong>。在Java语言中，数组（ArrayList）和链表（Linked List）都属于线性表。其中数组使用了顺序结构，而链表使用了链式结构。</p><p>线性表的数据对象集合为<code>{a1,a2,...,an-1,an}</code>，每个元素的类型均为<code>DataType</code>。<strong>数据元素之间的关系是一对一的关系。</strong>其中，除第一个元素<code>a1</code>外，每个元素有且只有一个直接前驱元素，除最后一个元素<code>an</code>外，每个元素有且只有一个直接后继元素。</p><h1 id="线性表伪代码"><a href="#线性表伪代码" class="headerlink" title="线性表伪代码"></a>线性表伪代码</h1><pre class="line-numbers language-none"><code class="language-none">ADT 线性表（List）Data  数据对象集合 {a1,a2,...,an-1,an}Operation  init(*L)：初始化空线性表L  isEmpty(L)：判断线性表是否为空  clear(*L)：清空线性表  getElement(L,i,*e)：将线性表L中第i个元素返回给e  elementAt(L,e)：线性表L中查找与e相等的元素，返回元素的位置  insert(*L,i,e)：线性表L中第i个位置插入新元素e  delete(*L,i,*e)：删除线性表L中第i个位置元素，并返回该元素给e  length(L)：返回线性表L的元数个数endADT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="线性表的顺序存储结构"><a href="#线性表的顺序存储结构" class="headerlink" title="线性表的顺序存储结构"></a>线性表的顺序存储结构</h1><p>线性表的顺序存储结构封装需要3个属性：</p><ul><li>存储空间初始位置，数组指针</li><li>线性表的最大长度，指存储空间总长度，初始化后不变</li><li>线性表的当前长度，指表中元素数量，大于等于0，小于表的最大长度</li></ul><h2 id="顺序存储结构的地址计算方法"><a href="#顺序存储结构的地址计算方法" class="headerlink" title="顺序存储结构的地址计算方法"></a>顺序存储结构的地址计算方法</h2><p><strong>注：<code>i</code>从“1”开始</strong></p><p>假设每个元素类型的<code>DataType</code>都需要占用<code>c</code>个储存单位（字节），那么线性表中第<code>i+1</code>个元素和第<code>i</code>个元素的存储位置的关系是（LOC为获得存储位置的函数）：</p><p><code>LOC(ai+1) = LOC(ai) + c</code></p><p>所以找第<code>i</code>个元素<code>ai</code>的储存位置可以又线性表初始指针指向的<code>a1</code>推算出：</p><p><strong><code>LOC(ai) = LOC(a1) + (i-1) * c</code></strong></p><p>通过这个公式，计算出线性表中任意位置的地址，所用的时间都是相同的，那么他的存储时间性能就是<code>O(1)</code>，<strong>这种结构通常被称为随机存储结构。</strong></p><h1 id="线性表的链式存储结构"><a href="#线性表的链式存储结构" class="headerlink" title="线性表的链式存储结构"></a>线性表的链式存储结构</h1><p>顺序存储结构最大的缺点，插入和删除需要移动大量元素，从而保持表中元素邻居的关系；链式存储结构通过携带后继元素的存储地址就解决了这个缺点。</p><p>链式存储结构的线性表中元素称为“存储映像”，也称为“节点（Node）”。每个节点都是由两部分组成：</p><ul><li>数据域：储存数据元素信息的域</li><li>指针域：存储直接后继元素地址的域</li></ul><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><p><code>n</code>个节点链接成一个链表，即为线性表<code>(a1,a2,...,an-1,an)</code>的链式存储结构。因为此链表的每个节点中只包含一个指针域，所以叫做单链表。</p><p><img src="/gallery/data-structure-linked-list-normal.png" alt="单链表图示"></p><p>单链表必须有一个头部加上0到多个节点。头指针是链表指向第一个节点的指针，如果链表有头结点，则头指针指向头结点。头结点携带第一个元素的节点指针，放在第一个节点之前，其数据域一般无意义，但也可以存放链表的长度。头结点不是必须的，但是头结点可以放一些对列表有用的变量。</p><p>尾指针是指向单链表的最后一个节点的指针，这个指针不是必须的，但是尾指针有好处，比如需要在尾部插入新节点。</p><p><strong>若线性表需要频繁查找，很少进行插入和删除操作是，宜采用顺序存储结构。</strong></p><p><strong>若需要频繁插入和删除时，宜采用单链表结构。</strong></p><h2 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h2><p>在内存中建立一个数组，在数组最大长度内的空间中再建立一个链表，这种链表就是静态链表。静态链表通过“游标（Cursor）”指向后继元素所处数组中的“下标（Index）”。下图为静态链表转普通链表，最大长度为<code>100</code>，第一个元素游标指向备用链表的头节点（既当前链表尾节点的游标，也是尾指针），最后一个元素游标指向当前链表头节点。</p><p><img src="/gallery/data-structure-linked-list-static-to-normal.png" alt="静态链表转普通链表"></p><ul><li>数组中第一个和最后一个元素不存放数据</li><li>未使用的数组元素被称为备用链表</li><li>数组第一个元素，即<code>Index = 0</code>的元素的游标（Cursor）存放备用链表的第一个节点的下标</li><li>数组最后一个元素，即<code>Index = MAX_SIZE-1</code>的元素的游标（Cursor）存放当前链表的第一个节点的下标</li><li>静态链表初始化时，<code>Index = 0</code>的元素的游标应从<code>1</code>开始，而<code>Index = MAX_SIZE-1</code>的元素的游标则是<code>0</code>，表示空链表</li></ul><h2 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h2><p>在单链表中，如果不从头结点出发，就无法访问到全部节点。循环链表就解决了这个问题。只要有链表中某一节点的指针，就能跑完全部节点。当表为空时，头部后继指针指向头部本身。</p><p><strong>循环链表所用的方法就是把尾节点的空指针指向头节点，使单链表形成一个环，这种头尾相接的单链表被称为单循环链表，简称循环链表。</strong></p><p>原单链表判断尾节点用<code>node.next === null ?</code>，现在则是用<code>node.next === head ?</code>。</p><h2 id="双向链表"><a href="#双向链表" class="headerlink" title="双向链表"></a>双向链表</h2><p>对比单链表，双向链表的节点有两个指针：前驱指针和后继指针。双向列表允许从尾部往回跑。当表为空时，头部前驱指针和后继指针都指向头部本身。</p><h1 id="找单链表中间的节点的方法"><a href="#找单链表中间的节点的方法" class="headerlink" title="找单链表中间的节点的方法"></a>找单链表中间的节点的方法</h1><p>利用快慢指针原理：设置两个指针<code>*search</code>和<code>*middle</code>都指向单链表的头结点。其中<code>*search</code>的移动速度是<code>*middle</code>的2倍。当<code>*search</code>指向尾节点时，<code>*middle</code>正好就在中间。</p><p>在一个长度为100的单链表中，当<code>*search</code>指向第100个节点时，<code>*middle</code>指向第50个节点。</p><p>在一个长度为101的单链表中，当<code>*search</code>指向102（即超出长度）时，<code>*middle</code>指向第51个节点，正好在中间。</p><h1 id="判断一个链表是否有环"><a href="#判断一个链表是否有环" class="headerlink" title="判断一个链表是否有环"></a>判断一个链表是否有环</h1><p>方法一：设置两个指针<code>*q</code>和<code>*b</code>。<code>*q</code>一直在走的情况下，每遇到一个节点，<code>*b</code>就从新从头结点开始走。如果<code>*q</code>所在当前步数等于<code>*b</code>从头开始数的步数，则<code>*q</code>继续往前走一步，而<code>*b</code>从新走。如果<code>*q</code>所在当前步数不等于<code>*b</code>的从头开始数的步数，则存在环。这种方法可以找到环所在节点。</p><p>方法二：设置两个指针<code>*q</code>和<code>*b</code>都指向单链表的头结点。其中<code>*q</code>的移动速度是<code>*b</code>的2倍，若在某个时候<code>*q == *b</code>，则存在环。一般偶数量节点的单循环链表跑两次后<code>*q == *b</code>。</p><blockquote><p>本文参考：<br><a href="https://www.bilibili.com/video/BV1jW411K7yg">【C语言描述】《数据结构和算法》（小甲鱼）</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性表 </tag>
            
            <tag> List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c语言的一些用法</title>
      <link href="/archives/123456.html"/>
      <url>/archives/123456.html</url>
      
        <content type="html"><![CDATA[<h1 id="C语言中的-和-的不同点，-define里的-用法"><a href="#C语言中的-和-的不同点，-define里的-用法" class="headerlink" title="C语言中的#和##的不同点，#define里的\用法"></a>C语言中的#和##的不同点，#define里的\用法</h1><p>首先#和##两个标识符都是用来预编译的，如果<img src="./782bd3b02a77577bda15bdf04b0726f4.png" alt="截图"></p><p>只要这个变量有被定义为1时候，这个预编译就会启用</p><p>##标识符的话就是</p><p><img src="./1d033cfab710d4941dab4ec4684adef9.png" alt="截图"></p><p>在这个#define的函数里 const osThreadDef_t os_thread_def_##name中  </p><p>如果name有定于 例如 name = start_thread</p><p>那么就会显示</p><p>const osThreadDef_t os_thread_def_start_thread</p><p>##的含义就是会和前面的字符一起连接在一起</p><p>\的标识符的含义是连续的符号 ，如果#define a \ </p><p>const abc= 111</p><p>就可以连接  </p><p>注意\后面除了换行回车不能有任何字符，空格也不行。</p>]]></content>
      
      
      <categories>
          
          <category> C语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础 </tag>
            
            <tag> 抽象数据类 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
